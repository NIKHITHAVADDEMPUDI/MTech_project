name: Build, Push, and Deploy to Minikube

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the 'main' branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Log in to Docker Hub using secrets (configure in GitHub settings)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:latest .

    # Push the Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/myapp:latest

    # Set up Minikube with Podman as the driver and CRIO as the runtime
    - name: Set up Minikube with Podman driver and CRIO runtime
      run: |
        # Start Minikube with Podman as the driver and CRIO as the runtime
        minikube start --driver=podman --container-runtime=crio

        # Set up kubectl to use Minikube
        kubectl config use-context minikube

    # Check if deployment exists
    - name: Check if deployment exists
      id: deployment_check
      run: |
        kubectl get deployments myapp-deployment || echo "Deployment does not exist" > result.txt

    # Deploy the image (create or update)
    - name: Deploy to Minikube
      run: |
        if grep -q "Deployment does not exist" result.txt; then
          # Deployment does not exist, create it
          kubectl apply -f deployment.yaml
        else
          # Deployment exists, update it
          kubectl set image deployment/myapp-deployment myapp=${{ secrets.DOCKER_USERNAME }}/myapp:latest
        fi

    # Wait for the deployment to complete (either create or update)
    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/myapp-deployment

    # Expose the service to access externally (optional, if needed)
    - name: Expose the service
      run: |
        kubectl expose deployment myapp-deployment --type=LoadBalancer --name=myapp-service
        minikube service myapp-service

