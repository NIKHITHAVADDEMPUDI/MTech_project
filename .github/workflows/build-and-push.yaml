name: Build, Push, and Deploy Image to Minikube with Podman

on:
  push:
    branches:
      - main  # Trigger when changes are pushed to the `main` branch

jobs:
  build_and_deploy:
    runs-on: self-hosted  # This must be your machine with Podman installed

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Podman
      run: |
        # Check if Podman is installed
        if ! command -v podman &> /dev/null
        then
            echo "Podman is not installed. Installing Podman..."
            brew install podman  # Install Podman if not installed (macOS)
        fi

    - name: Build the image using Podman
      run: |
        IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/myapp:latest"  # Name your image (e.g., myapp)
        podman build -t $IMAGE_NAME .  # Use the Dockerfile to build the image

    - name: Push the image to Docker Hub using Podman
      run: |
        IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/myapp:latest"  # Ensure proper naming
        podman push $IMAGE_NAME

    - name: Delete existing Minikube cluster (if it exists)
      run: |
        minikube delete || echo "No existing Minikube cluster found"  # Delete any existing cluster

    - name: Set up Minikube
      run: |
        # Start Minikube with Kubernetes 1.21.0 and Podman as the driver
        minikube start --kubernetes-version=v1.21.0 --driver=podman --cni=bridge --cri=crio

    - name: Set up kubectl
      run: |
        # Set the kubectl context to Minikube
        kubectl config use-context minikube

    - name: Deploy the app to Minikube
      run: |
        # Define the Kubernetes deployment YAML
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: myapp-deployment
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: myapp
          template:
            metadata:
              labels:
                app: myapp
            spec:
              containers:
              - name: myapp
                image: "${{ secrets.DOCKER_USERNAME }}/myapp:latest"  # Use the newly built image
                ports:
                - containerPort: 8080
        EOF

