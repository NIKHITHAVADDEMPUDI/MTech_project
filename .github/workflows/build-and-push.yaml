name: Build, Push, and Deploy Frontend & Backend to Minikube
on:
  push:
    branches:
      - main
#hi4
jobs:
  build_push_deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Podman
      run: |
        if ! command -v podman &> /dev/null; then
          echo "Podman is not installed. Installing Podman..."
          brew install podman
        fi

    - name: Build and push frontend image
      run: |
        IMAGE_NAME="docker.io/${{ secrets.DOCKER_USERNAME }}/frontend:final"
        podman build -t $IMAGE_NAME ./frontend
        podman push $IMAGE_NAME

    - name: Build and push backend image
      run: |
        IMAGE_NAME="docker.io/${{ secrets.DOCKER_USERNAME }}/backend:final"
        podman build -t $IMAGE_NAME ./backend
        podman push $IMAGE_NAME

    - name: Ensure Minikube cluster (3 nodes)
      run: |
        echo "Starting Minikube cluster with 3 nodes..."
        minikube start --driver=podman --container-runtime=cri-o --nodes=3

    - name: Wait until all Minikube nodes are Ready
      run: |
        echo "Waiting for all Minikube nodes to be Ready..."
        READY_NODES=0
        TOTAL_NODES=3
        TIMEOUT=300
        ELAPSED=0
        while [ "$READY_NODES" -lt "$TOTAL_NODES" ] && [ "$ELAPSED" -lt "$TIMEOUT" ]; do
          READY_NODES=$(kubectl get nodes --no-headers | grep -c ' Ready')
          echo "$READY_NODES/$TOTAL_NODES nodes are Ready..."
          if [ "$READY_NODES" -lt "$TOTAL_NODES" ]; then
            sleep 10
            ELAPSED=$((ELAPSED + 10))
          fi
        done
        if [ "$READY_NODES" -lt "$TOTAL_NODES" ]; then
          echo "Timeout waiting for nodes to be Ready."
          exit 1
        fi
        echo "All Minikube nodes are Ready!"

    - name: Set up kubectl context
      run: kubectl config use-context minikube

    - name: Apply all Kubernetes manifests
      run: |
        find ./manifests -name '*.yaml' -exec kubectl apply -f {} \;

    - name: Print working directory
      run: |
        echo "Current working directory: $PWD"
        echo "Backup file: $PWD/combined.yaml"
        echo "Backup directory: $PWD/backup"
        echo "Node count file: $PWD/node_count.txt"

    - name: Run all Python scripts in parallel with separate terminals
      run: |
        for script in $(find ./scripts -name '*.py'); do
          echo "Starting $script in a new terminal..."
          osascript -e "tell app \"Terminal\" to do script \"cd $PWD && python3 $script\""
        done

    # Start npm in Minikube_Dashboard/frontend
    - name: Start Minikube Dashboard Frontend
      run: |
        echo "Starting Minikube_Dashboard/frontend npm start in a new terminal..."
        osascript -e "tell app \"Terminal\" to do script \"cd $PWD/Minikube_Dashboard/Frontend/src && npm start\""

    # Start Minikube Dashboard Backend
    - name: Start Minikube Dashboard Backend
      run: |
        echo "Starting Minikube_Dashboard/backend python3 app.py in a new terminal..."
        osascript -e "tell app \"Terminal\" to do script \"cd $PWD/Minikube_Dashboard/Backend && python3 app.py\""

